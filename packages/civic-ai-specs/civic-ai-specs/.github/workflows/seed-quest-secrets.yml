name: Seed Quest Secrets

on:
  workflow_dispatch:
    inputs:
      secret_type:
        description: 'Type of secrets to generate'
        required: true
        default: 'random'
        type: choice
        options:
          - random
          - hash
          - uuid
          - base64
          - hex
          - words
      write_mode:
        description: 'Write secrets to files'
        required: true
        default: true
        type: boolean
      output_format:
        description: 'Output format'
        required: true
        default: 'json'
        type: choice
        options:
          - json
          - csv

jobs:
  generate-secrets:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Generate quest secrets
        run: |
          echo "Generating quest secrets..."
          echo "Secret type: ${{ github.event.inputs.secret_type }}"
          echo "Write mode: ${{ github.event.inputs.write_mode }}"
          echo "Output format: ${{ github.event.inputs.output_format }}"
          
          # Build command
          cmd="node scripts/quests-bulk-secret.mjs ${{ github.event.inputs.secret_type }}"
          
          if [ "${{ github.event.inputs.write_mode }}" == "true" ]; then
            cmd="$cmd --write"
          fi
          
          if [ "${{ github.event.inputs.output_format }}" == "json" ]; then
            cmd="$cmd --json"
          fi
          
          echo "Running: $cmd"
          eval $cmd

      - name: Upload secrets artifact
        if: github.event.inputs.write_mode == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: quest-secrets
          path: |
            ops/seeds/
            lore/quests/*.secret.json
          retention-days: 30

      - name: Create secrets summary
        run: |
          echo "## Quest Secrets Generated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Secret Type**: ${{ github.event.inputs.secret_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Write Mode**: ${{ github.event.inputs.write_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Format**: ${{ github.event.inputs.output_format }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event.inputs.write_mode }}" == "true" ]; then
            echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ -f "ops/seeds/secret-seeds.json" ]; then
              echo "- \`ops/seeds/secret-seeds.json\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f "ops/seeds/secret-seeds.csv" ]; then
              echo "- \`ops/seeds/secret-seeds.csv\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- Individual secret files in \`lore/quests/\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Notice" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Important**: Generated secrets are stored in artifacts and should be handled securely." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Download artifacts only from trusted sources" >> $GITHUB_STEP_SUMMARY
          echo "- Store secrets securely in your deployment environment" >> $GITHUB_STEP_SUMMARY
          echo "- Rotate secrets regularly" >> $GITHUB_STEP_SUMMARY
          echo "- Never commit secrets to version control" >> $GITHUB_STEP_SUMMARY

  verify-secrets:
    runs-on: ubuntu-latest
    needs: generate-secrets
    if: github.event.inputs.write_mode == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download secrets artifact
        uses: actions/download-artifact@v3
        with:
          name: quest-secrets

      - name: Verify secrets format
        run: |
          echo "Verifying secrets format..."
          
          if [ -f "ops/seeds/secret-seeds.json" ]; then
            echo "Validating JSON format..."
            node -e "
              const fs = require('fs');
              const data = JSON.parse(fs.readFileSync('ops/seeds/secret-seeds.json', 'utf8'));
              console.log('✓ JSON format is valid');
              console.log('Total secrets:', data.secrets.length);
              console.log('Secret types:', data.metadata.secret_types);
            "
          fi
          
          if [ -f "ops/seeds/secret-seeds.csv" ]; then
            echo "Validating CSV format..."
            head -5 ops/seeds/secret-seeds.csv
            echo "✓ CSV format appears valid"
          fi
          
          # Check individual secret files
          secret_files=$(find lore/quests -name "*.secret.json" | wc -l)
          echo "Individual secret files: $secret_files"

      - name: Test secret API examples
        run: |
          echo "Testing secret API examples..."
          
          # Create a simple test script
          cat > test-secrets.js << 'EOF'
          const fs = require('fs');
          
          // Test loading secrets
          if (fs.existsSync('ops/seeds/secret-seeds.json')) {
            const data = JSON.parse(fs.readFileSync('ops/seeds/secret-seeds.json', 'utf8'));
            console.log('✓ Successfully loaded JSON secrets');
            console.log('Sample secret:', data.secrets[0]);
          }
          
          if (fs.existsSync('ops/seeds/secret-seeds.csv')) {
            const csv = fs.readFileSync('ops/seeds/secret-seeds.csv', 'utf8');
            const lines = csv.split('\n');
            console.log('✓ Successfully loaded CSV secrets');
            console.log('CSV headers:', lines[0]);
            console.log('Sample row:', lines[1]);
          }
          
          // Test individual secret files
          const secretFiles = fs.readdirSync('lore/quests').filter(f => f.endsWith('.secret.json'));
          if (secretFiles.length > 0) {
            const sampleSecret = JSON.parse(fs.readFileSync(`lore/quests/${secretFiles[0]}`, 'utf8'));
            console.log('✓ Successfully loaded individual secret file');
            console.log('Sample individual secret:', sampleSecret);
          }
          EOF
          
          node test-secrets.js