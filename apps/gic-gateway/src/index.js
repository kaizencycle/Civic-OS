import Fastify from 'fastify'; import { ethers } from 'ethers'; import { makeResolveCache, registerNewPostRoute } from './events.js'; const PORT=process.env.PORT||8787, REG=process.env.REGISTRY_ADDR, RPC=process.env.RPC_URL, IPFS=process.env.IPFS_HTTP_GATEWAY||'https://ipfs.io/ipfs/'; const NAME=process.env.GATEWAY_NAME||'gic-gateway'; if(!REG||!RPC){ console.error('Missing REGISTRY_ADDR or RPC_URL'); process.exit(1); } const ABI=["function getDomain(string) view returns (tuple(address owner,string ipfsHash,bytes32 integrityProof,uint256 expiresAt))"]; const app=Fastify({logger:true}); const provider=new ethers.JsonRpcProvider(RPC); const registry=new ethers.Contract(REG,ABI,provider); const cache=makeResolveCache(); app.get('/',async(_q,r)=>r.send({ok:true,name:NAME})); app.get('/resolve/:label',async(req,reply)=>{ const label=(req.params.label||'').toLowerCase(); if(!label) return reply.code(400).send({ok:false,error:'bad_label'}); const warm=cache.get(label); if(warm) return reply.header('x-gic-ledger-proof',warm.proof).send({ok:true,label,cid:warm.cid,proof:warm.proof,warmed:true}); const d=await registry.getDomain(label); if(!d.owner) return reply.code(404).send({ok:false,error:'not_found'}); cache.set(label,{cid:d.ipfsHash,proof:d.integrityProof,ts:Date.now()}); return reply.header('x-gic-ledger-proof',d.integrityProof).send({ok:true,label,cid:d.ipfsHash,proof:d.integrityProof}); }); app.get('/:label',async(req,reply)=>{ const label=(req.params.label||'').toLowerCase(); const warm=cache.get(label); if(warm) return reply.header('x-gic-ledger-proof',warm.proof).redirect(302,IPFS+warm.cid); const d=await registry.getDomain(label); if(!d.owner) return reply.code(404).send('not found'); cache.set(label,{cid:d.ipfsHash,proof:d.integrityProof,ts:Date.now()}); return reply.header('x-gic-ledger-proof',d.integrityProof).redirect(302,IPFS+d.ipfsHash); }); registerNewPostRoute(app,registry,cache); app.listen({port:Number(PORT),host:'0.0.0.0'});