// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20; contract GICRegistry{ struct Domain{address owner; string ipfsHash; bytes32 integrityProof; uint256 expiresAt;} uint256 public renewalSeconds=90 days; mapping(string=>Domain) private domains; constructor(address){ } function getDomain(string memory n) external view returns(Domain memory){return domains[n];} function register(string calldata n,string calldata c,bytes32 p) external payable{domains[n]=Domain({owner:msg.sender,ipfsHash:c,integrityProof:p,expiresAt:block.timestamp+renewalSeconds});} function updateRecords(string calldata n,string calldata c,bytes32 p) external {require(domains[n].owner==msg.sender,'not_owner'); domains[n].ipfsHash=c; domains[n].integrityProof=p;} }